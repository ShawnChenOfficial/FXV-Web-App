// <auto-generated />
using System;
using FXV.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FXV_App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191208213447_migration_version_20191209_v1")]
    partial class migration_version_20191209_v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FXV.Data.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FXV.Data.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PermissionsP_ID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Profile_Img_Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt_1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt_2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("PermissionsP_ID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FXV.Models.Activity_Scheduled", b =>
                {
                    b.Property<int>("AS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("AS_ID");

                    b.ToTable("Activity_Scheduleds");
                });

            modelBuilder.Entity("FXV.Models.Combine_Builder", b =>
                {
                    b.Property<int>("CB_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("C_ID")
                        .HasColumnType("int");

                    b.Property<int?>("CombinesC_ID")
                        .HasColumnType("int");

                    b.Property<int>("Test_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TestsTest_ID")
                        .HasColumnType("int");

                    b.HasKey("CB_ID");

                    b.HasIndex("CombinesC_ID");

                    b.HasIndex("TestsTest_ID");

                    b.ToTable("Combine_Builders");
                });

            modelBuilder.Entity("FXV.Models.Combine_Results", b =>
                {
                    b.Property<int>("CR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("C_ID")
                        .HasColumnType("int");

                    b.Property<int?>("CombinesC_ID")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.HasKey("CR_ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CombinesC_ID");

                    b.ToTable("Combine_Results");
                });

            modelBuilder.Entity("FXV.Models.Combines", b =>
                {
                    b.Property<int>("C_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Img_Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("C_ID");

                    b.ToTable("Combines");
                });

            modelBuilder.Entity("FXV.Models.Event_Assigned_Attendees", b =>
                {
                    b.Property<int>("EA_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("Attendee_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.Property<int>("E_ID")
                        .HasColumnType("int");

                    b.Property<int?>("EventsE_ID")
                        .HasColumnType("int");

                    b.HasKey("EA_ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventsE_ID");

                    b.ToTable("Event_Assigned_Attendees");
                });

            modelBuilder.Entity("FXV.Models.Event_Builders", b =>
                {
                    b.Property<int>("EB_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("C_ID")
                        .HasColumnType("int");

                    b.Property<int?>("CombinesC_ID")
                        .HasColumnType("int");

                    b.Property<int>("E_ID")
                        .HasColumnType("int");

                    b.Property<int?>("EventsE_ID")
                        .HasColumnType("int");

                    b.HasKey("EB_ID");

                    b.HasIndex("CombinesC_ID");

                    b.HasIndex("EventsE_ID");

                    b.ToTable("Event_Builders");
                });

            modelBuilder.Entity("FXV.Models.Event_Results", b =>
                {
                    b.Property<int>("ER_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("E_ID")
                        .HasColumnType("int");

                    b.Property<int?>("EventsE_ID")
                        .HasColumnType("int");

                    b.Property<int>("Final_Point")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.HasKey("ER_ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventsE_ID");

                    b.ToTable("Event_Results");
                });

            modelBuilder.Entity("FXV.Models.Events", b =>
                {
                    b.Property<int>("E_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Img_Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("E_ID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FXV.Models.Individual_Tests", b =>
                {
                    b.Property<int>("IT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<double>("Result")
                        .HasColumnType("double");

                    b.Property<int>("Test_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TestsTest_ID")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("User_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.HasKey("IT_ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TestsTest_ID");

                    b.ToTable("Individual_Tests");
                });

            modelBuilder.Entity("FXV.Models.Organization_Relationships", b =>
                {
                    b.Property<int>("OR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("Org_ID")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationsOrg_ID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("User_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.HasKey("OR_ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("OrganizationsOrg_ID");

                    b.ToTable("Organization_Relationships");
                });

            modelBuilder.Entity("FXV.Models.Organizations", b =>
                {
                    b.Property<int>("Org_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Img_Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Manager_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Num_Of_Teams")
                        .HasColumnType("int");

                    b.HasKey("Org_ID");

                    b.HasIndex("AppUserId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("FXV.Models.Permissions", b =>
                {
                    b.Property<int>("P_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Permission")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("P_ID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FXV.Models.Sports", b =>
                {
                    b.Property<int>("Sport_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Sport_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Sport_ID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("FXV.Models.Team_Memberships", b =>
                {
                    b.Property<int>("TM_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Team_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamsTeam_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.HasKey("TM_ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TeamsTeam_ID");

                    b.ToTable("Team_Memberships");
                });

            modelBuilder.Entity("FXV.Models.Teams", b =>
                {
                    b.Property<int>("Team_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Img_Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Manager_ID")
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Num_Of_Members")
                        .HasColumnType("int");

                    b.Property<int>("Org_ID")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationsOrg_ID")
                        .HasColumnType("int");

                    b.Property<int>("Sport_ID")
                        .HasColumnType("int");

                    b.HasKey("Team_ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("OrganizationsOrg_ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FXV.Models.Test_Org_Relationships", b =>
                {
                    b.Property<int>("TOR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Org_ID")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationsOrg_ID")
                        .HasColumnType("int");

                    b.Property<int>("Test_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TestsTest_ID")
                        .HasColumnType("int");

                    b.HasKey("TOR");

                    b.HasIndex("OrganizationsOrg_ID");

                    b.HasIndex("TestsTest_ID");

                    b.ToTable("Test_Org_Relationships");
                });

            modelBuilder.Entity("FXV.Models.Test_Team_Relationships", b =>
                {
                    b.Property<int>("TTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Team_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamsTeam_ID")
                        .HasColumnType("int");

                    b.Property<int>("Test_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TestsTest_ID")
                        .HasColumnType("int");

                    b.HasKey("TTR");

                    b.HasIndex("TeamsTeam_ID");

                    b.HasIndex("TestsTest_ID");

                    b.ToTable("Test_Team_Relationships");
                });

            modelBuilder.Entity("FXV.Models.Tests", b =>
                {
                    b.Property<int>("Test_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Age_Group")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Img_Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Measurement_Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Splites")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Test_ID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FXV.Data.AppUser", b =>
                {
                    b.HasOne("FXV.Models.Permissions", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionsP_ID");
                });

            modelBuilder.Entity("FXV.Models.Combine_Builder", b =>
                {
                    b.HasOne("FXV.Models.Combines", "Combines")
                        .WithMany()
                        .HasForeignKey("CombinesC_ID");

                    b.HasOne("FXV.Models.Tests", "Tests")
                        .WithMany()
                        .HasForeignKey("TestsTest_ID");
                });

            modelBuilder.Entity("FXV.Models.Combine_Results", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FXV.Models.Combines", "Combines")
                        .WithMany()
                        .HasForeignKey("CombinesC_ID");
                });

            modelBuilder.Entity("FXV.Models.Event_Assigned_Attendees", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FXV.Models.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventsE_ID");
                });

            modelBuilder.Entity("FXV.Models.Event_Builders", b =>
                {
                    b.HasOne("FXV.Models.Combines", "Combines")
                        .WithMany()
                        .HasForeignKey("CombinesC_ID");

                    b.HasOne("FXV.Models.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventsE_ID");
                });

            modelBuilder.Entity("FXV.Models.Event_Results", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FXV.Models.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventsE_ID");
                });

            modelBuilder.Entity("FXV.Models.Individual_Tests", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FXV.Models.Tests", "Tests")
                        .WithMany()
                        .HasForeignKey("TestsTest_ID");
                });

            modelBuilder.Entity("FXV.Models.Organization_Relationships", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FXV.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationsOrg_ID");
                });

            modelBuilder.Entity("FXV.Models.Organizations", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("FXV.Models.Team_Memberships", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FXV.Models.Teams", "Teams")
                        .WithMany()
                        .HasForeignKey("TeamsTeam_ID");
                });

            modelBuilder.Entity("FXV.Models.Teams", b =>
                {
                    b.HasOne("FXV.Data.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FXV.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationsOrg_ID");
                });

            modelBuilder.Entity("FXV.Models.Test_Org_Relationships", b =>
                {
                    b.HasOne("FXV.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationsOrg_ID");

                    b.HasOne("FXV.Models.Tests", "Tests")
                        .WithMany()
                        .HasForeignKey("TestsTest_ID");
                });

            modelBuilder.Entity("FXV.Models.Test_Team_Relationships", b =>
                {
                    b.HasOne("FXV.Models.Teams", "Teams")
                        .WithMany()
                        .HasForeignKey("TeamsTeam_ID");

                    b.HasOne("FXV.Models.Tests", "Tests")
                        .WithMany()
                        .HasForeignKey("TestsTest_ID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FXV.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FXV.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FXV.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("FXV.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FXV.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FXV.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
